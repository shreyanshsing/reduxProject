{"version":3,"sources":["features/color/colorSlice.js","features/register/registration.js","features/link/shoplistslice.js","features/link/shoplist.js","features/color/Color.js","features/link/shop.js","features/link/User.js","features/link/help.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["colorSlice","createSlice","name","initialState","value","reducers","change","state","action","payload","actions","selectCount","c","Register","argument","Container","fluid","className","id","ListGroup","to","Item","variant","shopSlice","addShop","push","selectshop","d","Shoplist","shop","useSelector","console","log","renderShop","map","shops","key","location","Color","dispatch","useDispatch","useState","newColor","setNewColor","onChange","e","target","Button","onClick","Card","style","backgroundColor","color","Title","Image","src","margin","padding","Body","Footer","Shop","setName","setLocation","Form","onSubmit","event","preventDefalut","nanoid","Control","type","placeholder","defaultValue","User","Help","App","font","setFont","count","useEffect","Navbar","collapseOnSelect","expand","bg","Toggle","aria-controls","Collapse","Nav","Link","href","inline","exact","path","component","configureStore","reducer","cReducer","dReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef268a9c.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const colorSlice = createSlice({\r\n  name: 'color',\r\n  initialState: {\r\n    value: \"white\",\r\n  },\r\n  reducers: {\r\n      change: (state, action) => {\r\n      \tif (action.payload==\"light\") {\r\n      state.value=\"white\";\r\n    }\r\n    if (action.payload==\"dark\") {\r\n    \tstate.value=\"black\";\r\n    }\r\n}\r\n  }\r\n});\r\n\r\nexport const { change } = colorSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.c.value;\r\n\r\nexport default colorSlice.reducer;\r\n","import React,{useEffect} from \"react\";\nimport {Container,Button,ListGroup} from \"react-bootstrap\";\nimport {BrowserRouter as Router,Link} from \"react-router-dom\" ;\nimport \"./register.css\"\n  function Register(argument) {\n\n\treturn(\n          <Container fluid className=\"register\">\n          <Router>\n            <h1 id=\"1\">Hey! <br/><small>Connect with us</small></h1>\n            <ListGroup  className=\"links\">\n            <Link to=\"/registershop\" className=\"link-list\">  <ListGroup.Item variant=\"info\" >Register Shop</ListGroup.Item></Link>\n            <Link to=\"/registerasuser\"className=\"link-list\"> <ListGroup.Item variant=\"warning\" >Register as User</ListGroup.Item></Link>\n            <Link to=\"/help\"className=\"link-list\">  <ListGroup.Item variant=\"danger\" >Need Assistance</ListGroup.Item></Link>\n            </ListGroup>\n          </Router>\n          </Container>\n\t\t)\n}\nexport default Register","import {createSlice} from \"@reduxjs/toolkit\"\n\nexport const shopSlice=createSlice({\n\tname:\"shop\",\n\tinitialState:[\n\t{\"id\":0,\"name\":\"Brisk-Official\",\"location\":\"Kanpur(UP)\"},\n\t{\"id\":1,\"name\":\"Brisk-Official\",\"location\":\"Lucknow(UP)\"}\n\t],\n\treducers:{\n\t\taddShop:(state,action)=>{\n\t\t\tstate.push(action.payload)\n\t\t}\n\t}\n});\nexport const {addShop}=shopSlice.actions;\nexport const selectshop=state=>state.d;\nexport default shopSlice.reducer;","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {selectshop} from \"./shoplistslice\"\nimport \"./shoplist.css\"\nfunction Shoplist(){\n\tconst shop=useSelector(selectshop);\n    console.log(shop)\n\n    const renderShop=shop.map(shops=>(\n    \t<div className=\"shop-info\" key={shops.id}>\n    \t    <p>Shop Name:{shops.name}</p>\n    \t    <p>Shop Location:{shops.location}</p>\n    \t</div>\n    \t)\n     )\nreturn(\n\t<div className=\"shop\">\n\t<h3>Shop's with us:</h3>\n      <div> {renderShop}</div>\n\t</div>\n\t)\n}\nexport default Shoplist","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  change,\r\n  selectCount,\r\n} from './colorSlice';\r\nimport {Button,Card,Image} from \"react-bootstrap\"\r\nimport \"./card.css\";\r\nimport Register from \"../register/registration\";\r\nimport Shoplist from \"../link/shoplist\";\r\nexport function Color() {\r\n  const count = useSelector(selectCount);\r\n  const dispatch = useDispatch();\r\n  const [newColor, setNewColor] = useState(\"\");\r\n\r\n  return (\r\n    <div>\r\n     \r\n        <div>Theme:</div>\r\n      <div >\r\n        <select  value={newColor} onChange={e => setNewColor(e.target.value)} >\r\n        <option>select</option>\r\n        <option value=\"dark\">Drak</option>\r\n        <option value=\"light\">Light</option>\r\n        </select>\r\n        <Button onClick={() =>\r\n            dispatch(change(newColor))\r\n          }\r\n        >\r\n          Change Theme\r\n        </Button>\r\n       <Card style={{backgroundColor:\"powderblue\",color:\"black\"}}>\r\n       <Card.Title>\r\n         <Image className=\"card-img\" src=\"dog.gif\" />\r\n         <h3 style={{margin:\"10px\",padding:\"5px\"}}>AIM<small>'S</small>:</h3>\r\n        </Card.Title>\r\n         <Card.Body>\r\n         <ul>\r\n         <li>Get to know about your dog.</li>\r\n         <li>Dog training tutorial's for most of the dog breed's.</li>\r\n         <li>Nearby petshop's.</li>\r\n         <li>Foods and toys liked by dog's</li>\r\n         </ul>\r\n         </Card.Body>\r\n         <Card.Footer style={{color:\"red\"}}>\r\n         *We only show registered shop's with us. This list will update as more and more people's connect with us\r\n         </Card.Footer>\r\n      </Card>\r\n      </div>\r\n       <Register/>\r\n       <Shoplist/>\r\n    </div>\r\n  );\r\n}\r\n","import React,{useState,useEffect} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {Form,Button} from \"react-bootstrap\";\nimport {addShop} from \"./shoplistslice\";\nimport {nanoid} from \"@reduxjs/toolkit\";\nfunction Shop(argument) {\n\t// body...\n\tconst [name,setName]=useState(null)\n\tconst [location,setLocation]=useState(null)\n    const dispatch=useDispatch()\n    const handleSubmit=(event)=>{\n    \tevent.preventDefalut();\n    \tif(name&&location){\n    \t\tdispatch(addShop({\n    \t\t\tid:nanoid(),\n    \t\t\tname,\n    \t\t\tlocation\n    \t\t}))\n    \t}\n    \tsetName('')\n    \tsetLocation('')\n    }\n\n\treturn(\n         <div>\n         <h2>Welcome Dear!<br/>Get your shop registered with us and give your shop fame.</h2>\n         <b>Fill the details below :)</b>\n         <Form onSubmit={handleSubmit}>\n         <label>Enter Shop name:</label>\n         <Form.Control type=\"text\" placeholder=\" shop name.\" defaultValue={name} onChange={(e)=>setName(e.target.value)}/>\n         <br/>\n         <label>Enter Shop Location:</label>\n         <Form.Control type=\"text\" placeholder=\"location\" defaultValue={location} onChange={(e)=>setLocation(e.target.value)}/>\n         <br/>\n         <Button type=\"submit\" variant=\"danger\">Submit</Button>\n         </Form>\n         </div>\n\t\t)\n}\nexport default Shop;","import React from \"react\"\nfunction User(argument) {\n\t// body...\n\treturn(\n         <div>\n         User\n         </div>\n\t\t)\n}\nexport default User;","import React from \"react\"\nfunction Help(argument) {\n\t// body...\n\treturn(\n         <div>\n         Help\n         </div>\n\t\t)\n}\nexport default Help;","import React,{useState,useEffect} from 'react';\r\nimport { Color } from './features/color/Color';\r\nimport {Container,Navbar,Nav,Form,Button} from \"react-bootstrap\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectCount} from \"./features/color/colorSlice\";\r\nimport Register from \"./features/register/registration\";\r\nimport {BrowserRouter as Router ,Switch,Route} from \"react-router-dom\";\r\nimport Shop from \"./features/link/shop\";\r\nimport User from \"./features/link/User\";\r\nimport Help from \"./features/link/help\";\r\nfunction App() {\r\n   const [font,setFont]=useState(\"black\")\r\n   const count = useSelector(selectCount);\r\n \r\n   useEffect(()=>{\r\n   \tif (count==\"black\") {\r\n   \t\tsetFont(\"white\")\r\n   \t}\r\n   \telse{\r\n   \t\tsetFont(\"black\")\r\n   \t}\r\n   },[count])\r\n\r\n  return (\r\n    <div className=\"App\" style={{backgroundColor:count,color:font}}>\r\n    <Container fluid>\r\n    <Router>\r\n    <header>\r\n      <h1>Brisk.Com</h1>\r\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n      <Nav className=\"mr-auto justify-content-center\">\r\n      <Nav.Link href=\"#menu\"><i className=\"material-icons\">menu</i></Nav.Link>\r\n      <Nav.Link href=\"#profile\"><i className=\"material-icons\">perm_identity</i></Nav.Link>\r\n      <Nav.Link href=\"#downloads\"><i className=\"material-icons\">get_app</i></Nav.Link>\r\n      </Nav>\r\n      <Form inline>\r\n      <Form.Control type=\"text\" placeholder=\"search\" className=\"mr-sm-2\"/>\r\n      <Button type=\"submit\" variant=\"outline-info\"><i className=\"material-icons\">search</i></Button>\r\n      </Form>\r\n      </Navbar.Collapse>\r\n      </Navbar>\r\n    </header>\r\n         <Switch>\r\n          <Route exact path=\"/reduxProject\" component={Color}/>\r\n          <Route exact path=\"/registershop\" component={Shop}/>\r\n          <Route exact path=\"/registerasuser\" component={User}/>\r\n          <Route exact path=\"/help\" component={Help}/>\r\n          </Switch>\r\n          </Router>\r\n   </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport cReducer from '../features/color/colorSlice';\r\nimport dReducer from \"../features/link/shoplistslice\"\r\nexport default configureStore({\r\n  reducer: {\r\n    c:cReducer,\r\n    d:dReducer,\r\n  }\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}